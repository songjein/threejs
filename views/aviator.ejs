<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8>
    <title>ss</title>
		<style>
			body{
				padding:0;
				margin:0;
			}
			#world{
				position: absolute;
				width: 100%;
				height: 100%;
				overflow: hidden;
				background: linear-gradient(#e4e0ba, #f7d9aa);
			}
		</style>
		<script
		src="https://code.jquery.com/jquery-1.12.4.min.js"
		integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ="
		crossorigin="anonymous"></script>
		<script src="/three.min.js"></script>
		<script src="/OBJLoader.js"></script>
		<script src="/OrbitControls.js"></script>
		<!-- http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/ -->
	</head>
	<body>
		<!-- container element to hold rendered scene -->
		<div id="world"></div>	
	</body>

	<script>
		// color palette!!
		var Colors = {
			red:0xf25346,
			white:0xd8d0d1,
			brown:0x59332e,
			pink:0xF5986E,
			brownDark:0x23190f,
			blue:0x68c3c0,
		};
		
		window.addEventListener('load', init, false);

		function init(){
			// set up the scene, the camera and the renderer	
			createScene();

			// add the lights
			createLights();

			// add the objects
			createPlane();
			createSea();
			createSky();

			// start a Loop that will update the objects' positions
			// and render the scene on each frame
			loop();
		}

		/*
			- A scene : consider this as the stage where every object needs to be added 
									in order to be rendered.
			- A camera : in this case we will use a perspective camera, but it could also be
									 an orthographic camera.
			- A renderer that will display all the scene using WebGL.
			- One or more objects to render, in our case, we will create a plane, a sea and a sky
			- One or more lights : there is also different types of lights available.
														 In this project we will mainly use a hemisphere light
														 for the atmosphere and a directional light for the shadows.
		*/
		var scene, camera, fieldOfView, aspectRatio, nearPlane, farPlane, HEIGHT, WIDTH,
				renderer, container; 
		function createScene(){
			// get the width and the height of the screen,
			// use them to set up the aspect ratio of the camera
			// and the size of the renderer
			HEIGHT = window.innerHeight;
			WIDTH = window.innerWidth;

			// create the scene
			scene = new THREE.Scene();

			// Add a fog effect to the screen; same color as the background color
			scene.fog = new THREE.Fog(0xf7d9aa, 100, 950);

			// create the camera
			aspectRatio = WIDTH / HEIGHT;
			fieldOfView = 60;
			nearPlane = 1;
			farPlane = 10000;
			camera = new THREE.PerspectiveCamera(
				fieldOfView,
				aspectRatio,
				nearPlane,
				farPlane
			);

			// set the position of the camera
			camera.position.x = 0;
			camera.position.z= 200;
			camera.position.y= 100;

			// create the renderer
			renderer = new THREE.WebGLRenderer({
				// allow transparency to show the gradient background
				// we defined in the CSS
				alpha: true,

				// activiate the anti-aliasing; this is less performant,
				// but, as our project is low-poly based, it should be fine
				antialias: true
			});

			//define the size of the renderer; 
			renderer.setSize(WIDTH, HEIGHT);

			// enable shadow rendering
			renderer.shadowMap.enabled = true;

			// add the DOM element of the renderer to the 
			// container we created in the HTML
			container = document.getElementById('world');
			container.appendChild(renderer.domElement);
			
			// as the screen size can change, we need to 
			// update the renderer size and the camera aspect ratio
			function handleWindowResize(){
				HEIGHT = window.innerHeight;
				WIDTH = window.innerWidth;
				renderer.setSize(WIDTH, HEIGHT);
				camera.aspect = WIDTH / HEIGHT;
				camera.updateProjectionMatrix();
			}
			// listen to the screen: if the user resizes it
			// we have to update the camera and the renderer size
			window.addEventListener('resize', handleWindowResize, false);
		}
		/*
			The Lights	
			The lights will set the mood of the whole scene and must be determined carefully.
			At this step of the project, we will just try to make the lightning good enough
			to make the objects visible
		*/
		var hemisphereLight, shadowLight;

		function createLights(){
			// A hemisphere Light is a gradient colored light;
			// the first param is the sky color, the second is the ground color
			// and third is the intensity of the light
			hemisphereLight = new THREE.HemisphereLight(0xaaaaaa, 0x000000, .9);
			
			// A directional light shines from a specific direction
			// It acts like the sun, that means that all the rays produced are parallel.
			shadowLight = new THREE.DirectionalLight(0xffffff, .9);
			
			// set the direction of the light; 위치라 할 수 있음
			shadowLight.position.set(150, 350, 350);

			// allow shadow casting ; 끈 것도 이뻐보임
			shadowLight.castShadow = true;

			// define the visible area of the projected shadow ; 여기는 이해가 잘 안감
			shadowLight.shadow.camera.left = -400;
			shadowLight.shadow.camera.right = 400;
			shadowLight.shadow.camera.top = 400;
			shadowLight.shadow.camera.bottom = -400;
			shadowLight.shadow.camera.near = 1;
			shadowLight.shadow.camera.far = 1000;

			// define the resolution of the shadow, the higher the better
			// but also the more expensive and less performant
			shadowLight.shadow.mapSize.width = 2048;
			shadowLight.shadow.mapSize.height = 2048;
			
			// to activate the lights, just add them to the scene
			scene.add(hemisphereLight);
			scene.add(shadowLight);
		}
		
		/*
			How to create an object??
			- create a geometry
			- create a material
			- pass them into a mesh
			- add the mesh to our screen
		*/
		var Sea = function() {
			// create the geometry(shape) of the cylinder;
			// the parameters are:
			// radius top, radius bottom, height, number of segments on radius, number of segmest vertically
			// 처음에 위를 보고 세워져있어
			var geom = new THREE.CylinderGeometry(600, 600, 800, 40, 10); 

			// rotate the geometry on the x axis
			// 얘는 아예 축을 돌려버리는 것 같아. mesh.rotation.x 로 할 순있지만 순간적인 회전인 듯
			geom.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI/2));

			// create the material
			var mat = new THREE.MeshPhongMaterial({
				color: Colors.blue,
				transparent: true,
				opacity: .6,
				shading: THREE.FlatShading,
			});

			// To create an object in Three.js, we have to create a mesh
			// which is a combination of a geometry and some material
			this.mesh = new THREE.Mesh(geom, mat);

			// Allow the sea to receive shadows
			this.mesh.receiveShadow = true;
		}

		var sea;

		function createSea(){
			sea = new Sea();	

			// push it a little bit at the bottom of the scene
			sea.mesh.position.y = -600;

			// add the mesh of the sea to the scene
			scene.add(sea.mesh);
		}

		var Cloud = function(){
			// Create an empty container that will hold the different parts of the cloud
			this.mesh = new THREE.Object3D();

			// create a cube geometry;
			// this shape will be duplicated to create the cloud
			var geom = new THREE.BoxGeometry(20, 20, 20);
			
			// create a material; a simple white material will do the trick
			var mat = new THREE.MeshPhongMaterial({
				color: Colors.white,	
			});

			// duplicate the geomtry a random number of times
			var nBlocs = 3 + Math.floor(Math.random() * 3);
			for (var i = 0; i < nBlocs; i++){

				// create the mesh by cloning the geometry
				var m = new THREE.Mesh(geom, mat);

				// set the position and the rotation of each cube randomly
				m.position.x = i * 15;
				m.position.y = Math.random() * 10;
				m.position.z = Math.random() * 10;
				m.rotation.z = Math.random() * Math.PI * 2;
				m.rotation.y = Math.random() * Math.PI * 2;

				// set the size of the cube randomly
				var s = .1 + Math.random() * .9;
				m.scale.set(s, s, s);

				// allow each cube to cast and to receive shadows
				m.castShadow = true;
				m.receiveShadow = true;

				// add the cube to the container we first created
				this.mesh.add(m);
			}
		}

		var Sky = function(){
			// create an empty container
			this.mesh = new THREE.Object3D();

			// choose a number of clouds to be scattered in the sky
			this.nClouds = 20;

			// to distribute the clouds consistently,
			// we need to place them according to a uniform angle
			var stepAngle = Math.PI * 2 / this.nClouds;

			// create the clouds
			for (var i = 0 ; i < this.nClouds; i++){
				var c = new Cloud();	

				// set the rotation and the position of each cloud;
				// for that we use a bit of trigonometry
				var a = stepAngle * i;	// this is the final angle of the cloud
				var h = 750 + Math.random() * 200; // this is the distance between the center of the axis and the cloud itself

				// Trigonometry!!! I hope you remember what you've learned in math
				// in case you don't
				// we are simply converting polar coordinates (angle, distance) into Cartesian coordinates (x,y)
				c.mesh.position.y = Math.sin(a) * h;
				c.mesh.position.x = Math.cos(a) * h;

				// rotate the cloud according to its position
				// Math.PI / 2를 지우면 다 1자로 서있어, a는 왜있는진 아직 이해못함
				c.mesh.rotation.z = a + Math.PI / 2;

				// for a better result, we position the clouds
				// at random depths inside of the scene
				c.mesh.position.z = -400 - Math.random() * 400;

				// we also set a random scale for each cloud
				var s = 1 + Math.random() * 2;
				c.mesh.scale.set(s, s, s);
			
				// do not forget to add the mesh of each cloud in the scene
				this.mesh.add(c.mesh);
			}
		}
		
		var sky;

		function createSky(){
			sky = new Sky();
			sky.mesh.position.y = -600;
			scene.add(sky.mesh);
		}

		var AirPlane = function() {
			this.mesh = new THREE.Object3D();
			
			// Create the cabin
			var geomCockpit = new THREE.BoxGeometry(60,50,50,1,1,1);
			var matCockpit = new THREE.MeshPhongMaterial({color:Colors.red, shading:THREE.FlatShading});
			var cockpit = new THREE.Mesh(geomCockpit, matCockpit);
			cockpit.castShadow = true;
			cockpit.receiveShadow = true;
			this.mesh.add(cockpit);
			
			// Create the engine
			var geomEngine = new THREE.BoxGeometry(20,50,50,1,1,1);
			var matEngine = new THREE.MeshPhongMaterial({color:Colors.white, shading:THREE.FlatShading});
			var engine = new THREE.Mesh(geomEngine, matEngine);
			engine.position.x = 40;
			engine.castShadow = true;
			engine.receiveShadow = true;
			this.mesh.add(engine);
			
			// Create the tail
			var geomTailPlane = new THREE.BoxGeometry(15,20,5,1,1,1);
			var matTailPlane = new THREE.MeshPhongMaterial({color:Colors.red, shading:THREE.FlatShading});
			var tailPlane = new THREE.Mesh(geomTailPlane, matTailPlane);
			tailPlane.position.set(-35,25,0);
			tailPlane.castShadow = true;
			tailPlane.receiveShadow = true;
			this.mesh.add(tailPlane);
			
			// Create the wing
			var geomSideWing = new THREE.BoxGeometry(40,8,150,1,1,1);
			var matSideWing = new THREE.MeshPhongMaterial({color:Colors.red, shading:THREE.FlatShading});
			var sideWing = new THREE.Mesh(geomSideWing, matSideWing);
			sideWing.castShadow = true;
			sideWing.receiveShadow = true;
			this.mesh.add(sideWing);
			
			// propeller
			var geomPropeller = new THREE.BoxGeometry(20,10,10,1,1,1);
			var matPropeller = new THREE.MeshPhongMaterial({color:Colors.brown, shading:THREE.FlatShading});
			this.propeller = new THREE.Mesh(geomPropeller, matPropeller);
			this.propeller.castShadow = true;
			this.propeller.receiveShadow = true;
			
			// blades
			var geomBlade = new THREE.BoxGeometry(1,100,20,1,1,1);
			var matBlade = new THREE.MeshPhongMaterial({color:Colors.brownDark, shading:THREE.FlatShading});
			
			var blade = new THREE.Mesh(geomBlade, matBlade);
			blade.position.set(8,0,0);
			blade.castShadow = true;
			blade.receiveShadow = true;
			this.propeller.add(blade);
			this.propeller.position.set(50,0,0);
			this.mesh.add(this.propeller);
		};

		var airplane;

		function createPlane(){
			airplane = new AirPlane();
			airplane.mesh.scale.set(.25, .25, .25);
			airplane.mesh.position.y = 100;
			scene.add(airplane.mesh);
		}

		function loop(){
			// Rotate the propeller, the sea and the sky
			airplane.propeller.rotation.x += 0.3;
			sea.mesh.rotation.z += .005;
			sky.mesh.rotation.z += .01;
			
			// render the scene
			renderer.render(scene, camera);

			// call the loop function again
			requestAnimationFrame(loop);
		}
	</script>
</html>
