<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8>
    <title>ss</title>
		<script
		src="https://code.jquery.com/jquery-1.12.4.min.js"
		integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ="
		crossorigin="anonymous"></script>
		<script src="/three.min.js"></script>
		<script src="/OBJLoader.js"></script>
		<script src="/OrbitControls.js"></script>
		<!-- http://blog.teamtreehouse.com/the-beginners-guide-to-three-js -->
		<!-- http://bl.ocks.org/chrisbrasington/fcf701b424256d671c95 -->
		<script>
			window.onload = function() {
				var scene, camera, renderer;	

				init();
				animate();

				// Sets up the scene
				function init(){
					scene = new THREE.Scene();	
					var WIDTH = $(window).width(), HEIGHT = $(window).height();
					
					// Create a renderer and add it to the DOM
					// After creating the renderer, we append it to the DOM via the body element
					// Three.js create a 'canvas' inside the body
					renderer = new THREE.WebGLRenderer({antialias:true});
					//renderer.setSize(WIDTH, HEIGHT);
					renderer.setSize(WIDTH, HEIGHT);
					document.body.appendChild(renderer.domElement);

					// Create a camera, zoom it out from the model a bit,  and add it to the scene.
					// Fov - We're using 45 degrees for our field of view.
					// Aspect - We're simply dividing the browser width and height to get an aspect ratio.
					// Near - This is the distance at which the camera will start rendering scene objects.
					// Far - Anything beyond this distance will not be rendered. Perhaps more commonly known as the draw distance.
					camera = new THREE.PerspectiveCamera(45, WIDTH / HEIGHT, 0.1, 20000);
					camera.position.set(50, 50, 0); // to get distance btw our view and the mesh
					scene.add(camera);

					// Create an event listener that resizes the renderer with the browser window
					window.addEventListener('resize', function(){
						var WIDTH = $(window).width(), HEIGHT = $(window).height();
						renderer.setSize(WIDTH, HEIGHT);
						camera.aspect = WIDTH / HEIGHT;
						camera.updateProjectionMatrix();
					});

					// Set the background color of the scene
					renderer.setClearColor(0x333F47, 1);

					// Create a light, set its position, and add it to the scene
					var light = new THREE.PointLight(0xffffff);
					light.position.set(50, 100, 150); // 1번째가 x축으로 앞뒤, 2번째가 y로 위아래,  3번째가 왼쪽+  오른쪽-
					scene.add(light);

					// texture 
					var manager = new THREE.LoadingManager();
						manager.onProgress = function ( item, loaded, total ) {
						console.log( item, loaded, total );
					};
					
					// geometry 가 오브젝트인듯
					// model 
					var loader = new THREE.OBJLoader(manager);
					//loader.load( '/coco.obj', function ( obj ) {
					loader.load( '/coco.obj', function ( obj ) {
						obj.traverse(function (child) {
							if (child instanceof THREE.Mesh) {
								//child.material = material;
							}
						});
						scene.add( obj );
					});
					
					controls = new THREE.OrbitControls(camera, renderer.domElement);
				}

				// Renders the scene and updates the render as needed.
				function animate() {
			 
					// Read more about requestAnimationFrame at http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
					requestAnimationFrame(animate);
			 
					// Render the scene.
					renderer.render(scene, camera);
					controls.update();
				}
			}
		</script>
	</head>
	<body>
		
	</body>
</html>
